package example.src;

import javax.jms.Session;
import javax.jms.MessageProducer;
import javax.jms.MessageConsumer;
import javax.jms.Connection;
import javax.jms.TextMessage;
import javax.jms.Message;

eventclass ProducerConsumer{
	/*
	 * This automaton recognize the following event sequence:
	 * (eventoHello (eventoWorld eventoHello)* eventoHello) 
	 */	
	automaton constructor(){
		start initState : (eventRun -> firstState)||(eventMessageProducer -> firstState);
		firstState : (eventRun -> firstState)||(eventMessageProducer -> finalState);
		end finalState;
	}
	
	/* 
	 * Means that accept only the local calls
	 */ 
	group localGroup{
		localhost
	}
	
	event eventMessageProducer(): call(* example.src.ProducerTool.showParameters()) && host(localGroup);
	
	event eventMessageConsumer(): call(* example.src.ConsumerTool.showParameters()) && host(localGroup);
	
	event eventMessageConsumer2(): call(* example.src.ConsumerTool2.showParameters()) && host(localGroup);
	
	event eventRun(): call(* example.src.ProducerTool.onMessage(MessageProducer, TextMessage)) && host(localGroup);
	
	event eventRun1(): call(* example.src.ConsumerTool.onMessage(Message)) && host(localGroup);
	
	event eventRun2(): call(* example.src.ConsumerTool2.onMessage(Message)) && host(localGroup);
	
	reaction after constructor.initState{
		String msg = "Reaction detected connection";
		System.out.println("----------------------------------------");
		System.out.println(msg);
		System.out.println("----------------------------------------");
	}
	
	reaction after constructor.firstState{
		String msg = "Reaction detected messages";
		System.out.println("----------------------------------------");
		System.out.println(msg);
		System.out.println("----------------------------------------");
	}	
}